generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String    @unique
  clientId     Int?
  password     String
  roleId       Int?
  departmentId Int?
  phoneNumber  String?
  whatsAppNo   String?
  refreshToken String?
  apiToken     String?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // RELATIONS
  role       Role?        @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  client     Client?      @relation(fields: [clientId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  UserConfig UserConfig[]
}

model Role {
  id           Int      @id @default(autoincrement())
  name         String
  roleId       Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // RELATIONS
  users     User[]
  Client    Client[]
  ClientRoleMapping ClientRoleMapping[]
}

model ClientRoleMapping {
  id        Int       @id @default(autoincrement())
  clientId  Int?
  roleId    Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  role       Role?        @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  client     Client?      @relation(fields: [clientId], references: [id], onUpdate: Cascade, onDelete: SetNull)
}

model Menu {
  id        Int       @id @default(autoincrement())
  label     String    @unique
  icon      String?
  url       String    @unique
  group     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  UserConfig UserConfig[]
}

model UserConfig {
  id        Int       @id @default(autoincrement())
  userId    Int
  menuId    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id])
  menu Menu @relation(fields: [menuId], references: [id])
}

model Client {
  id          Int       @id @default(autoincrement())
  name        String?
  email       String    @unique
  code        String    @unique
  phoneNumber String
  address     String
  gst         String?
  pan         String?
  roleId      Int?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  // RELATIONS
  role Role?  @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  User User[]

  ClientRoleMapping ClientRoleMapping[]
}
